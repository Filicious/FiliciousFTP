<?php

/**
 * High level object oriented filesystem abstraction.
 *
 * @package filicious-ftp
 * @author  Tristan Lins <tristan.lins@bit3.de>
 * @author  Christian Schiffler <c.schiffler@cyberspectrum.de>
 * @author  Oliver Hoff <oliver@hofff.com>
 * @link    http://filicious.org
 * @license http://www.gnu.org/licenses/lgpl-3.0.html LGPL
 */

namespace Bit3\Filesystem\FTP;

require_once(__DIR__ . '/../../../bootstrap.php');

use Bit3\Filesystem\FTP\FTPFilesystemConfig;
use Bit3\Filesystem\FTP\FTPFilesystem;
use Bit3\Filesystem\FTP\FTPFile;
use Bit3\Filesystem\Iterator\FilesystemIterator;
use Bit3\Filesystem\Iterator\RecursiveFilesystemIterator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-17 at 10:47:54.
 */
class FtpFilesystemTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FTPFilesystemConfig
     */
    protected $config;

    /**
     * @var FTPFilesystem
     */
    protected $fs;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = FTPFilesystemConfig::create('localhost');

        $this->fs = FTPFilesystem::create($this->config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testLazyConnect()
    {
        $class = new \ReflectionClass('Bit3\Filesystem\FTP\FTPFilesystem');
        $property = $class->getProperty('connection');
        $property->setAccessible(true);

        $config = new FTPFilesystemConfig('localhost');
        $config->setLazyConnect(true);

        $fs = new FTPFilesystem($config);

        $this->assertEquals(NULL, $property->getValue($fs));
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::mount
     * @todo   Implement testMount().
     * /
    public function testMount()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::umount
     * @todo   Implement testUmount().
     * /
    public function testUmount()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::getRoot
     * @todo   Implement testGetRoot().
     * /
    public function testGetRoot()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::getFile
     * @todo   Implement testGetFile().
     * /
    public function testGetFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::getFreeSpace
     * @todo   Implement testDiskFreeSpace().
     * /
    public function testDiskFreeSpace()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::getTotalSpace
     * @todo   Implement testDiskTotalSpace().
     * /
    public function testDiskTotalSpace()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bit3\Filesystem\Merged\MergedFilesystem::glob
     * @todo   Implement testGlob().
     * /
    public function testGlob()
    {
        $root = $this->merged->getRoot();

        var_dump($root->listAll());

        var_dump($this->merged->glob('*'));
    }
    */

    public function testTree()
    {
        $root = $this->fs->getRoot();

        $filesystemIterator = new RecursiveFilesystemIterator($root, FilesystemIterator::CURRENT_AS_BASENAME);
        $treeIterator = new \RecursiveTreeIterator($filesystemIterator);

        foreach ($treeIterator as $path) {
            echo $path . "\n";
        }
    }
}
